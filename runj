#!/usr/bin/env python3

# Copyright (c) Liu Yuan <namei.unix@gmail.com>
# Distributed under the terms of the 3-Clause BSD License.

import os
import sys
import argparse
import subprocess
import http.server
import socketserver
import socket
import string
import random
from functools import partial
import nbconvert
import time
import json
from bs4 import BeautifulSoup
import re

class Ansi2HtmlConverter:
    def __init__(self):
        self.ansi_colors = {
            30: 'color:black', 31: 'color:red', 32: 'color:green',
            33: 'color:yellow', 34: 'color:blue', 35: 'color:magenta',
            36: 'color:cyan', 37: 'color:white'
        }
        self.ansi_styles = {
            1: 'font-weight:bold', 3: 'font-style:italic',
            4: 'text-decoration:underline'
        }
        self.ansi_reset = '\033[0m'


    def convert(self, text):
        html = ''
        style_stack = []
        color_stack = []

        # Minic the behavior of carriage return style progress bar from tqdm
        lines = text.split('\n')
        text = ''
        for ln in lines:
             text += ln.split('\r')[-1] + '\n' # only keep the last line after '\r'

        # print(text)
        # Convert text to iterator
        text_iter = iter(text)

        for char in text_iter:
            if char == '\033':
                # ANSI escape sequence found
                escape_seq = ''
                while char != 'm':
                    escape_seq += char
                    char = next(text_iter)
                escape_seq += 'm'
                if escape_seq == '\033[0m':
                    # Reset all styles and colors
                    style_stack = []
                    color_stack = []
                    html += '</span>'
                elif escape_seq.startswith('\033[') and escape_seq.endswith('m'):
                    # Parse ANSI escape sequence
                    codes = escape_seq[2:-1].split(';')
                    for code in codes:
                        if code.isdigit():
                            code = int(code)
                            if code in self.ansi_colors:
                                # Set foreground color
                                color_stack.append(self.ansi_colors[code])
                            elif code == 39:
                                # Reset foreground color
                                if color_stack:
                                    color_stack.pop()
                            elif code in self.ansi_styles:
                                # Set text style
                                style_stack.append(self.ansi_styles[code])
                            elif code == 22 or code == 23 or code == 24:
                                # Reset text style
                                if style_stack:
                                    style_stack.pop()

                # Build HTML markup
                html += '</span>'
                if color_stack:
                    html += f'<span style="{color_stack[-1]}">'
                if style_stack:
                    html += f'<span style="{";".join(style_stack)}">'
            else:
                # Regular character
                html += char

        # Close any remaining HTML tags
        while color_stack or style_stack:
            html += '</span>'

        return html

OK = 200
UNAUTHORIZED = 401
NOT_FOUND = 404
INTERNAL_SERVER_ERROR = 500
NOT_IMPLEMENTED = 501

nb_status = ''
nb_start_time = 0

class RunjHandler(http.server.SimpleHTTPRequestHandler):
    connected_ips = {}

    def __init__(self, *args, token, notebook, **kwargs):
        self.token = token
        self.notebook = notebook
        super().__init__(*args, **kwargs)

    # TODO add support for other notebook versions
    def _html2ipynb(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        ipynb = {'nbformat': 4, 'nbformat_minor': 4, 'cells': [], 'metadata': {}}
        for d in soup.findAll("div"):
            if 'class' in d.attrs.keys():
                for clas in d.attrs["class"]:
                    if clas in ["jp-RenderedMarkdown", "jp-InputArea-editor"]:
                        if clas == "jp-InputArea-editor":
                            cell = {}
                            cell['metadata'] = {}
                            cell['outputs'] = []
                            cell['source'] = [d.get_text()]
                            cell['execution_count'] = None
                            cell['cell_type'] = 'code'
                            ipynb['cells'].append(cell)
                        else:
                            cell = {}
                            cell['metadata'] = {}
                            cell['source'] = [d.decode_contents()]
                            cell['cell_type'] = 'markdown'
                            ipynb['cells'].append(cell)
        return json.dumps(ipynb)

    # mute log messages
    def log_message(self, format, *args):
        pass

    def _get_latest_version(self):
        versions = set()
        for file in os.listdir('./runj'):
            number = file.split('_', 1)[0]
            if number.isdigit():
                versions.add(int(number))
        return max(versions) if versions else 0

    def sanity_check(self):
        # Log client IP address only once
        if self.client_address[0] not in self.connected_ips:
            print(f"Client connected: {self.client_address[0]}")
            self.connected_ips[self.client_address[0]] = True
        # print(f"Client requested: {self.path}")
        if self.token and self.token not in self.path:
            self.send_error(UNAUTHORIZED, 'Hey you are UNAUTHORIZED. Get out of here')
            print(f"Unauthorized access denied: {self.client_address[0]}")
            return False
        return True

    def do_POST(self):
        global nb_status
        global nb_start_time

        if self.sanity_check() is False:
            return
        if self.path == f"/{self.token}/notebook/stop" if self.token else self.path == '/notebook/stop':
            try:
                cmd = f"kill -9 $(ps aux | grep 'ipython {self.notebook}' | grep -v grep | awk \'{{print $2}}\')"
                subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                nb_status = 'stopped'
                print(f"Notebook stopped: {self.notebook}")
                self.send_response_only(OK)
                self.end_headers()
                return
            except Exception as e:
                print(f"Failed to stop notebook: {self.notebook}, exception: {e} ")
                self.send_error(INTERNAL_SERVER_ERROR, 'Internal server error')
                return
        elif self.path == f"/{self.token}/notebook/run" if self.token else self.path == '/notebook/run':
            try:
                cmd = f'ipython {self.notebook} > {self.notebook}.log 2>&1 &'
                subprocess.run(cmd, shell=True)
                nb_status = 'running'
                nb_start_time = time.time() * 1000
                print(f"Notebook runing: {self.notebook}")
                self.send_response_only(OK)
                self.end_headers()
                return
            except Exception as e:
                print(f"Failed to start notebook: {self.notebook}, exception: {e} ")
                self.send_error(INTERNAL_SERVER_ERROR, 'Internal server error')
                return
        elif self.path == f'/{self.token}/notebook/save' if self.token else self.path == '/notebook/save':
            try: # save notebook as {version+1}{notebook_name}
                data = json.loads(self.rfile.read(int(self.headers['Content-Length'])).decode('utf-8'))
                name = data.get("name")
                version  = self._get_latest_version() + 1
                new_name = f'{version}_'+ name.split('_', 1)[1]
                with open('runj/' + new_name, 'w') as f:
                    f.write(self._html2ipynb(data.get("content")))
                print(f"Notebook saved: {new_name}")
                self.send_response_only(OK)
                self.end_headers()
                return
            except Exception as e:
                print(f"Failed to save notebook: {new_name}, exception: {e} ")
                self.send_error(INTERNAL_SERVER_ERROR, 'Internal server error')
                return
        else:
            self.send_error(NOT_IMPLEMENTED, 'Not implemented')
            return

    def do_GET(self):
        global nb_status
        global nb_start_time

        def send_conent(content):
            self.send_response(OK)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('x-content-type-options', 'nosniff')
            self.send_header('Server', 'RunJ')
            self.send_header('Content-length', len(content))
            self.end_headers()
            self.wfile.write(content)

        if self.sanity_check() is False:
            return
        if self.path == f"/{self.token}":
            with open(f'{os.path.dirname(__file__)}/runj.html', 'r') as f:
                runj_html = f.read().encode('utf-8')
                send_conent(runj_html)
            return
        elif self.path == f"/{self.token}/logs" if self.token else self.path == '/logs':
            # if newline = '', line endings are returned to the caller untranslated
            with open(f'{self.notebook}.log', 'r',  newline='') as f:
                log = f.read()
                converter = Ansi2HtmlConverter()
                log_html = ('<pre>' + converter.convert(log) + '</pre>')
                cmd = f"ps aux | grep 'ipython {self.notebook}' | grep -v grep"
                p = subprocess.run(cmd, capture_output=True, shell=True)
                if p.stdout != b'':
                    nb_status = 'running'
                else:
                    nb_status = 'stopped'
                data = {
                    'nb_name': self.notebook.split('/')[-1],
                    'nb_status': nb_status,
                    'nb_start_time': nb_start_time,
                    'lg_content': log_html
                }
                send_conent(json.dumps(data).encode('utf-8'))
            return
        elif re.match(rf'^/{self.token}/notebook/.*\.ipynb$', self.path) if self.token else re.match(r'^/notebook/.*\.ipynb$', self.path):
            try:
                exporter = nbconvert.exporters.HTMLExporter(templage_file='basic')
                file = 'runj/' + self.path.split('/')[-1]
                notebook_html = exporter.from_filename(filename=file)[0].encode('utf-8')
                send_conent(notebook_html)
            except Exception as e:
                print(f"Failed to send notebook: {self.path}, exception: {e} ")
                self.send_error(INTERNAL_SERVER_ERROR, 'Internal server error')
            return
        elif self.path == f'/{self.token}/notebook/list' if self.token else self.path == '/notebook/list':
            notebook_list = []
            for file in os.listdir('runj'):
                if file.endswith('.ipynb'):
                    notebook_list.append(file)
            notebook_list.sort(key=lambda x: int(x.split('_', 1)[0]))
            send_conent(json.dumps(notebook_list).encode('utf-8'))
            return
        else:
            self.send_error(NOT_FOUND, 'Not found')
            return

class Runj:
    def __init__(self, filename, ip='0.0.0.0', port=8090, token=False):
        self.filename = filename
        self.ip = ip
        self.port = port
        # Generate a random token in URL to prevent unauthorized access if token is True
        self.token = ''.join(random.choices(string.ascii_letters + string.digits, k=8)) if token else ''

    def run(self):
        global nb_status
        global nb_start_time

        if not os.path.isfile(self.filename):
            print(f'Notebook {self.filename} does not exist')
            return
        file_dir = os.path.dirname(self.filename)
        file = os.path.basename(self.filename)
        if file_dir:
            os.chdir(file_dir)


        cmd = f"mkdir runj; cp {file} runj/'0_{file}'"
        subprocess.run(cmd, stderr=subprocess.DEVNULL, shell=True)
        file = f'runj/0_{file}'
        cmd = f'ipython {file} > {file}.log 2>&1 &'
        if subprocess.run(cmd, shell=True).returncode != 0:
            print(f'Error running command: {cmd}')
            return
        nb_start_time = time.time() * 1000
        nb_status = 'running'
        handler = partial(RunjHandler, token=self.token, notebook=file)
        socketserver.TCPServer.allow_reuse_address=True
        httpd = socketserver.TCPServer((self.ip, self.port), handler)

        # hack to get the host ip address other than 127.0.0.1
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("1.2.3.4", 80))
        host_ip = s.getsockname()[0]

        print(f'Serving at {self.ip}:{self.port}')
        URL = f'http://{host_ip}:{self.port}/' + (self.token if self.token else '')
        print('View log file at ' + URL)
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            # Handle Ctrl-C gracefully
            print('\nShutting down server')
            cmd = f"kill -9 $(ps aux | grep 'ipython {file}' | grep -v grep | awk \'{{print $2}}\')"
            subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
            httpd.shutdown()

if __name__ == '__main__':
    d='Run a Jupyter notebook and serve the output for viewing in a browser'
    e=f'Example: {sys.argv[0]} text.ipynb\n'
    parser = argparse.ArgumentParser(prog=sys.argv[0], description=d, epilog=e)
    parser.add_argument('filename', help='Name of the notebook file to run')
    parser.add_argument('--ip', default='0.0.0.0', help='IP address to serve the output on (default: 0.0.0.0)')
    parser.add_argument('--port', type=int, default=8090, help='Port to serve the output on (default: 8090)')
    parser.add_argument('-t', '--token', action='store_true', help='Generate a token for a safe URL')

    args = parser.parse_args()

    runj = Runj(args.filename, args.ip, args.port, args.token)
    runj.run()
